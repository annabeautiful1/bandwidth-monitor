name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build Server
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/bandwidth-monitor-server-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} ./cmd/server

    - name: Build Client  
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w" -o dist/bandwidth-monitor-client-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} ./cmd/client

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release
        find artifacts -type f -exec cp {} release/ \;
        ls -la release/

    - name: Create/Update Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: 带宽监控系统 ${{ github.ref_name }}
        body: |
          ## 🎉 带宽监控系统 ${{ github.ref_name }} 发布
          
          ### 🚀 v0.3.0 主要新功能
          - 🔥 **时区热更新**：支持无需重启的系统时区变更自动应用
          - 💻 **CPU/内存监控**：新增CPU和内存使用率告警（默认95%阈值）
          - ⚙️ **配置自动升级**：程序启动时自动补全缺失的默认配置项
          - 📊 **带宽检测优化**：改为取上下行最小值进行更准确的瓶颈检测
          - 🔔 **多类型告警**：支持带宽、CPU、内存、离线四种Telegram通知
          
          ### 🛠️ 重要改进
          - 📋 统一配置文件格式，确保所有客户端配置一致性
          - 🧹 代码优化清理，移除废弃函数，提升维护性
          - 🔒 线程安全的时区和配置管理机制
          - 🔄 配置热重载支持，减少服务重启需求
          
          ### 📦 快速安装/升级
          
          **一键控制脚本（推荐）:**
          ```bash
          sudo bash <(curl -sSL https://raw.githubusercontent.com/annabeautiful1/bandwidth-monitor/main/scripts/bmctl.sh)
          ```
          
          **服务端安装/升级:**
          ```bash
          curl -sSL https://raw.githubusercontent.com/annabeautiful1/bandwidth-monitor/main/scripts/install-server.sh | sudo bash
          ```
          
          **客户端安装/升级:**
          ```bash  
          curl -sSL https://raw.githubusercontent.com/annabeautiful1/bandwidth-monitor/main/scripts/install-client.sh | sudo bash
          ```
          
          ### 🏗️ 支持平台
          - Linux (amd64/arm64)
          - Windows (amd64) 
          - macOS (amd64/arm64)
          
          ### ✨ 升级亮点
          - ✅ **无需手动修改配置**：程序自动升级配置文件并添加默认值
          - ✅ **保留现有设置**：升级过程完全保持用户自定义配置
          - ✅ **热重载支持**：时区、配置变更无需重启服务
          - ✅ **智能告警**：防重复通知，状态变化时精准提醒
          
          ### 🔧 配置兼容性
          本版本自动为配置文件添加以下默认值：
          - CPU告警阈值：95%
          - 内存告警阈值：95%  
          - 动态阈值时段：自动升级到3时段配置
          - 其他缺失的必要参数
          
          详细变更记录请查看 [RELEASE_NOTES.md](https://github.com/annabeautiful1/bandwidth-monitor/blob/main/RELEASE_NOTES.md)
        draft: false
        prerelease: false
        files: |
          release/*
        fail_on_unmatched_files: true
        generate_release_notes: true
        make_latest: true
        token: ${{ secrets.GITHUB_TOKEN }}